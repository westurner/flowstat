diff -urN pyodbc-2.1.8.orig/src/connection.cpp pyodbc-2.1.8/src/connection.cpp
--- pyodbc-2.1.8.orig/src/connection.cpp	2010-09-06 12:32:26.000000000 +0200
+++ pyodbc-2.1.8/src/connection.cpp	2010-10-23 00:24:51.951789782 +0200
@@ -17,6 +17,7 @@
 #include "wrapper.h"
 #include "cnxninfo.h"
 #include "sqlwchar.h"
+#include "virtuoso.h"
 
 static char connection_doc[] =
     "Connection objects manage connections to the database.\n"
@@ -190,6 +191,8 @@
     cnxn->conv_types      = 0;
     cnxn->conv_funcs      = 0;
 
+    cnxn->virtuoso        = isVirtuoso(hdbc);
+
     //
     // Initialize autocommit mode.
     //
diff -urN pyodbc-2.1.8.orig/src/connection.h pyodbc-2.1.8/src/connection.h
--- pyodbc-2.1.8.orig/src/connection.h	2010-09-06 12:32:26.000000000 +0200
+++ pyodbc-2.1.8/src/connection.h	2010-10-23 00:18:57.238250348 +0200
@@ -52,6 +52,8 @@
     int wvarchar_maxlength;
     int binary_maxlength;
 
+    bool virtuoso;
+
     // Output conversions.  Maps from SQL type in conv_types to the converter function in conv_funcs.
     //
     // If conv_count is zero, conv_types and conv_funcs will also be zero.
diff -urN pyodbc-2.1.8.orig/src/cursor.cpp pyodbc-2.1.8/src/cursor.cpp
--- pyodbc-2.1.8.orig/src/cursor.cpp	2010-09-06 12:56:12.000000000 +0200
+++ pyodbc-2.1.8/src/cursor.cpp	2010-10-23 17:59:03.913089563 +0200
@@ -24,6 +24,7 @@
 #include "getdata.h"
 #include "dbspecific.h"
 #include "sqlwchar.h"
+#include "virtuoso.h"
 
 enum
 {
@@ -778,6 +779,8 @@
 
     FreeParameterData(cur);
 
+    cur->spasql = (cur->cnxn->virtuoso && isSPASQL(pSql));
+
     if (ret == SQL_NO_DATA)
     {
         // Example: A delete statement that did not delete anything.
@@ -1002,7 +1005,7 @@
             return 0;
         }
 
-        apValues[i] = value;
+	apValues[i] = value;
     }
 
     return (PyObject*)Row_New(cur->description, cur->map_name_to_index, field_count, apValues);
diff -urN pyodbc-2.1.8.orig/src/cursor.h pyodbc-2.1.8/src/cursor.h
--- pyodbc-2.1.8.orig/src/cursor.h	2010-09-06 12:32:26.000000000 +0200
+++ pyodbc-2.1.8/src/cursor.h	2010-10-22 22:56:55.858453023 +0200
@@ -115,6 +115,9 @@
     // The Cursor.rowcount attribute from the DB API specification.
     int rowcount;
 
+    // is a SPASQL query on a virtuoso server, requires special datatype handling
+    bool spasql;
+
     // A dictionary that maps from column name (PyString) to index into the result columns (PyInteger).  This is
     // constructued during an execute and shared with each row (reference counted) to implement accessing results by
     // column name.
diff -urN pyodbc-2.1.8.orig/src/getdata.cpp pyodbc-2.1.8/src/getdata.cpp
--- pyodbc-2.1.8.orig/src/getdata.cpp	2010-09-06 12:32:26.000000000 +0200
+++ pyodbc-2.1.8/src/getdata.cpp	2010-11-24 22:48:19.514024025 +0100
@@ -9,6 +9,7 @@
 #include "errors.h"
 #include "dbspecific.h"
 #include "sqlwchar.h"
+#include "virtuoso.h"
 
 void GetData_init()
 {
@@ -594,6 +595,87 @@
     return -1;
 }
 
+static
+PyObject *GetDataSPASQL(Cursor *cur, Py_ssize_t column)
+{
+    // Return a tuple of information sufficient to glean the
+    // real underlying type in case of a Virtuoso SPASQL query
+    int dvtype, flag;
+    SQLHANDLE hdesc = SQL_NULL_HANDLE;
+    SQLRETURN ret;
+    SQLCHAR lang[0x100], dtype[0x100];
+    SQLINTEGER len, dv_dt_type;
+    PyObject *value, *colinfo;
+
+    memset(lang, 0, sizeof(lang));
+    memset(dtype, 0, sizeof(dtype));
+
+    value = GetDataString(cur, column);
+    if (!value)
+	return Py_None;
+
+    // why do the virtuoso extensions number the columns from 1???
+    column += 1;
+
+    Py_BEGIN_ALLOW_THREADS
+	ret = SQLGetStmtAttr(cur->hstmt, SQL_ATTR_IMP_ROW_DESC, &hdesc, SQL_IS_POINTER, NULL);
+    Py_END_ALLOW_THREADS;
+    if (!SQL_SUCCEEDED(ret)) {
+	return Py_None;
+    }
+    Py_BEGIN_ALLOW_THREADS
+	ret = SQLGetDescField(hdesc, column, SQL_DESC_COL_DV_TYPE, &dvtype, SQL_IS_INTEGER, NULL);
+    Py_END_ALLOW_THREADS;
+    if (!SQL_SUCCEEDED(ret)) {
+	return Py_None;
+    }    
+    Py_BEGIN_ALLOW_THREADS
+	ret = SQLGetDescField(hdesc, column, SQL_DESC_COL_BOX_FLAGS, &flag, SQL_IS_INTEGER, NULL);
+    Py_END_ALLOW_THREADS;
+    if (!SQL_SUCCEEDED(ret)) {
+	return Py_None;
+    }
+
+    switch (dvtype) {
+        case VIRTUOSO_DV_RDF:
+	    Py_BEGIN_ALLOW_THREADS
+		ret = SQLGetDescField(hdesc, column, SQL_DESC_COL_LITERAL_LANG, lang, sizeof(lang), &len);
+	    Py_END_ALLOW_THREADS;
+	    if (!SQL_SUCCEEDED(ret))
+		return Py_None;
+	    Py_BEGIN_ALLOW_THREADS
+		ret = SQLGetDescField(hdesc, column, SQL_DESC_COL_LITERAL_TYPE, dtype, sizeof(dtype), &len);
+	    Py_END_ALLOW_THREADS;
+	    if (!SQL_SUCCEEDED(ret))
+		return Py_None;
+	    break;
+        case VIRTUOSO_DV_TIMESTAMP:
+        case VIRTUOSO_DV_DATE:
+        case VIRTUOSO_DV_TIME:
+        case VIRTUOSO_DV_DATETIME:
+	    Py_BEGIN_ALLOW_THREADS
+		ret = SQLGetDescField (hdesc, column, SQL_DESC_COL_DT_DT_TYPE, &dv_dt_type, SQL_IS_INTEGER, NULL);
+	    Py_END_ALLOW_THREADS;
+	    if (!SQL_SUCCEEDED(ret))
+		return Py_None;
+	    break;
+        default:
+	    break;
+    }
+
+    colinfo = Py_BuildValue("(Oiiiss)",
+			    value,
+			    dvtype,
+			    dv_dt_type,
+			    flag,
+			    (char *)lang,
+			    (char *)dtype);
+    if (!colinfo)
+	return Py_None;
+
+    return colinfo;
+}
+
 
 PyObject*
 GetData(Cursor* cur, Py_ssize_t iCol)
@@ -610,6 +692,10 @@
     if (conv_index != -1)
         return GetDataUser(cur, iCol, conv_index);
 
+    // Check if we have to apply SPASQL processing
+    if (cur->spasql)
+	return GetDataSPASQL(cur, iCol);
+
     switch (pinfo->sql_type)
     {
     case SQL_WCHAR:
diff -urN pyodbc-2.1.8.orig/src/pyodbcmodule.cpp pyodbc-2.1.8/src/pyodbcmodule.cpp
--- pyodbc-2.1.8.orig/src/pyodbcmodule.cpp	2010-09-06 12:32:26.000000000 +0200
+++ pyodbc-2.1.8/src/pyodbcmodule.cpp	2010-11-24 22:53:14.713510015 +0100
@@ -19,6 +19,7 @@
 #include "getdata.h"
 #include "cnxninfo.h"
 #include "dbspecific.h"
+#include "virtuoso.h"
 
 #include <time.h>
 #include <stdarg.h>
@@ -848,6 +849,22 @@
     MAKECONST(SQL_UNION),
     MAKECONST(SQL_USER_NAME),
     MAKECONST(SQL_XOPEN_CLI_YEAR),
+    // Virtuoso Extensions
+    MAKECONST(VIRTUOSO_DV_DATE),
+    MAKECONST(VIRTUOSO_DV_DATETIME),
+    MAKECONST(VIRTUOSO_DV_DOUBLE_FLOAT),
+    MAKECONST(VIRTUOSO_DV_IRI_ID),
+    MAKECONST(VIRTUOSO_DV_LONG_INT),
+    MAKECONST(VIRTUOSO_DV_NUMERIC),
+    MAKECONST(VIRTUOSO_DV_RDF),
+    MAKECONST(VIRTUOSO_DV_SINGLE_FLOAT),
+    MAKECONST(VIRTUOSO_DV_STRING),
+    MAKECONST(VIRTUOSO_DV_TIME),
+    MAKECONST(VIRTUOSO_DV_TIMESTAMP),
+    MAKECONST(VIRTUOSO_DV_TIMESTAMP_OBJ),
+    MAKECONST(VIRTUOSO_DT_TYPE_DATETIME),
+    MAKECONST(VIRTUOSO_DT_TYPE_DATE),
+    MAKECONST(VIRTUOSO_DT_TYPE_TIME)
 };
 
 
diff -urN pyodbc-2.1.8.orig/src/virtuoso.cpp pyodbc-2.1.8/src/virtuoso.cpp
--- pyodbc-2.1.8.orig/src/virtuoso.cpp	1970-01-01 01:00:00.000000000 +0100
+++ pyodbc-2.1.8/src/virtuoso.cpp	2010-10-23 18:09:43.276379650 +0200
@@ -0,0 +1,35 @@
+#include "pyodbc.h"
+#include "virtuoso.h"
+
+bool
+isVirtuoso(HDBC hdbc)
+{
+    char buf[0x1000];
+    SQLSMALLINT len;
+    SQLRETURN ret;
+
+    ret = SQLGetInfo(hdbc, (SQLUSMALLINT)SQL_DBMS_NAME, buf, sizeof(buf), &len);
+    if (!SQL_SUCCEEDED(ret))
+	return false;
+    if (!strncasecmp(buf, "OpenLink Virtuoso", sizeof(buf))) {
+	return true;
+    }
+
+    return false;
+}
+
+bool
+isSPASQL(PyObject *pSql)
+{
+    char *query = PyString_AS_STRING(pSql);
+
+    if (!query)
+	return false;
+    while (*query && isspace(*query))
+	query++;
+
+    if (!strncasecmp(query, "SPARQL", 6))
+	return true;
+    return false;
+}
+
diff -urN pyodbc-2.1.8.orig/src/virtuoso.h pyodbc-2.1.8/src/virtuoso.h
--- pyodbc-2.1.8.orig/src/virtuoso.h	1970-01-01 01:00:00.000000000 +0100
+++ pyodbc-2.1.8/src/virtuoso.h	2010-10-23 17:57:50.873802097 +0200
@@ -0,0 +1,51 @@
+#ifndef VIRTUOSO_H
+#define VIRTUOSO_H
+
+#ifdef HAVE_IODBC
+#include <iodbcext.h>
+#endif
+
+/*
+ *  Include Virtuoso ODBC extensions for SPASQL result set
+ */
+#if !defined (SQL_DESC_COL_DV_TYPE)
+
+/*
+ *  ODBC extensions for SQLGetDescField
+ */
+# define SQL_DESC_COL_DV_TYPE               1057L
+# define SQL_DESC_COL_DT_DT_TYPE            1058L
+# define SQL_DESC_COL_LITERAL_ATTR          1059L
+# define SQL_DESC_COL_BOX_FLAGS             1060L
+# define SQL_DESC_COL_LITERAL_LANG          1061L
+# define SQL_DESC_COL_LITERAL_TYPE          1062L
+
+/*
+ *  Virtuoso - ODBC SQL_DESC_COL_DV_TYPE
+ */
+# define VIRTUOSO_DV_DATE                   129
+# define VIRTUOSO_DV_DATETIME               211
+# define VIRTUOSO_DV_DOUBLE_FLOAT           191
+# define VIRTUOSO_DV_IRI_ID                 243
+# define VIRTUOSO_DV_LONG_INT               189
+# define VIRTUOSO_DV_NUMERIC                219
+# define VIRTUOSO_DV_RDF                    246
+# define VIRTUOSO_DV_SINGLE_FLOAT           190
+# define VIRTUOSO_DV_STRING                 182
+# define VIRTUOSO_DV_TIME                   210
+# define VIRTUOSO_DV_TIMESTAMP              128
+# define VIRTUOSO_DV_TIMESTAMP_OBJ          208
+
+/*
+ *  Virtuoso - ODBC SQL_DESC_COL_DT_DT_TYPE
+ */
+# define VIRTUOSO_DT_TYPE_DATETIME          1
+# define VIRTUOSO_DT_TYPE_DATE              2
+# define VIRTUOSO_DT_TYPE_TIME              3
+
+#endif /* SQL_DESC_COL_DV_TYPE */
+
+bool isVirtuoso(HDBC);
+bool isSPASQL(PyObject *);
+
+#endif /* VIRTUOSO_H */
